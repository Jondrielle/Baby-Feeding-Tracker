import {ref, reactive,computed} from 'vue'
import {defineStore} from 'pinia'
import axios from 'axios';

export const useFeedingsStore = defineStore('feedings', () => {

  const feedings = ref([])
  const filteredFeedings = ref([])
  const filterType = ref('') //e.g. method, time, amount_oz, amount_ml 
  const filterValue = ref('') //e.g. 'food' '3oz'
  const feed = reactive({
      id: null,
      method: '',
      amount_oz: null,
      amount_ml: null,
      time: '',
      notes: ''
  })

  async function fetchFeedings(){
    try{
      const response = await axios.get(`http://localhost:8000/getfeedings`)
      feedings.value = response.data
    }catch(error){
      console.error("Failed to fetch feedings:", error)
    }
  }
  
  const filterFeedings = computed(() => {
    if (!filterType.value || !filterValue.value){
      // No filter applied, return all
      return feedings.value
    }
  return feedings.value.filter(feed => {
    switch (filterType.value) {
      case 'method':
        return feed.method === filterValue.value
      case 'amount_oz':
        return feed.amount_oz === Number(filterValue.value)
      case 'amount_ml':
        return feed.amount_ml === Number(filterValue.value)
      case 'time':
        return feed.time === filterValue.value
      default:
        return true
    }
  })
})

  function setFilter(type, value) {
    filterType.value = type
    filterValue.value = value
  }

  function clearFilter() {
    filterType.value = ''
    filterValue.value = ''
  }

  async function addFeed(feedData) {
    try {
      const response = await axios.post('http://localhost:8000/createfeed/', feedData)

      // Merge the backend-generated id into the feed object
      const newFeed = { ...feedData, id: response.data.id }

      // Add to reactive array so UI updates
      feedings.value.push(newFeed)

      console.log("Created Feed:", newFeed)
    } catch (error) {
      console.error('Failed to add feed:', error)
    }
  }

  async function deleteFeed(selectFeed) {
    try {
      await axios.delete(`http://localhost:8000/deletefeed/${selectFeed.id}`)

      // Remove the matching feed from the frontend array
      feedings.value = feedings.value.filter(f => f.id !== selectFeed.id)

      console.log("Deleted Feed:")
    } catch (error) {
      console.error('Failed to delete feed:', error)
    }
  }

  function editFeed() {
    console.log("Edited Feed")
  }
  
  async function clearFeeds() {
    try{
      await axios.delete(`http://localhost:8000/deletefeedings`)
      feedings.value = []
      console.log("Deleted Feedings")
    }catch(error){
      console.error("Failed to delete feedings:", error)
    }
    
  }

  return { feedings, filterType,
    filterValue, filteredFeedings: filterFeedings,
    fetchFeedings,feed, setFilter, 
    clearFilter, addFeed,
    deleteFeed, editFeed, clearFeeds
  }
})